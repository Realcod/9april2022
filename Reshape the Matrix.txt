/*
In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping
its original data.
You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted
reshaped matrix.
The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.
If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.
*/

#include<iostream>
using namespace std;

int main(){
	int arr[100][100],ans[100][100],m,n,r,c;
	cout<<"Enter the size of the rows in the main array"<<endl;
	cin>>m;
	
	cout<<"Enter the size of the column in the main array"<<endl;
	cin>>n;
	
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			cin>>arr[i][j];
		}
	}
	
	cout<<"Enter the size of the rows in the ans array"<<endl;
	cin>>r;

	cout<<"Enter the size of the column in the ans array"<<endl;
	cin>>c;
	
	if(m*n!=r*c){
		for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			cout<<arr[i][j];
		}
		cout<<endl;
    }
	}
	else{
		int row=0,col=0;
	for(int i=0;i<m;i++){
		for(int j=0;j<n;j++){
			ans[row][col]=arr[i][j];
			col++;
			if(col==c){
				col=0;
				row++;
			}
		}
	}

	for(int i=0;i<r;i++){
		for(int j=0;j<c;j++){
			cout<<ans[i][j];
		}
	}
	}
	
}